import * as fs from 'fs'
import { TypeDefinition, CustomField } from '../'

type TypeMapping = { [k: string]: string }

type Options = {
  typeMapping?: TypeMapping
  namespace?: string
}

export const defaultOptions = {
  namespace: 'messages',
}

export const defaultMapping: TypeMapping = {
  'char[]': 'Buffer',
}

const getMembers = (fields: CustomField[], typeMap: TypeMapping) => {
  return fields.map(field => {
    const key = field.type + (field.length ? '[]' : '')
    const theType = typeMap[key] || key

    return `  ${field.name}: ${theType}`
  })
}

/**
 * Generate TypeScript interfaces from Bender types definitions
 */
export const generateString = (types: any[], options: Options = {}) => {
  const { namespace, typeMapping } = { ...defaultOptions, ...options }
  const typeMap: TypeMapping = { ...defaultMapping, ...typeMapping }

  const declarations = types.map(benderTypeDef => {
    const typeName = benderTypeDef.name

    if (typeMap[typeName]) {
      return `export type ${typeName} = ${typeMap[typeName]}`
    }

    if (benderTypeDef.size) {
      return `export type ${typeName} = number`
    }

    if (benderTypeDef.alias) {
      return `export type ${typeName} = ${benderTypeDef.alias}`
    }

    const members = benderTypeDef.fields
      ? getMembers(benderTypeDef.fields, typeMap)
      : []

    const membersString = members.join('\n')

    return `export interface ${typeName} {
${membersString}
}`
  })

  const result = declarations.join('\n\n')

  if (namespace) {
    return `/** GENERATED BY BENDEC TYPE GENERATOR */
namespace ${namespace} {
  ${result}
}

export = messages
`
  }

  return result
}

/**
 * Generate TypeScript interfaces from Bender types definitions
 */
export const generate = (types: any[], fileName: string, options?: Options) => {
  const moduleWrapped = generateString(types, options)

  fs.writeFileSync(fileName, moduleWrapped)
  console.log(`WRITTEN: ${fileName}`)
}